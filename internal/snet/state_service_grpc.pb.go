// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: internal/snet/state_service.proto

package snet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PaymentChannelStateService_GetChannelState_FullMethodName = "/escrow.PaymentChannelStateService/GetChannelState"
)

// PaymentChannelStateServiceClient is the client API for PaymentChannelStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PaymentChannelStateService contains methods to get the MultiPartyEscrow
// payment channel state.
// channel_id, channel_nonce, value and amount fields below in fact are
// Solidity uint256 values. Which are big-endian integers, see
// https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
// These values may be or may be not padded by zeros, service supports both
// options.
type PaymentChannelStateServiceClient interface {
	// GetChannelState method returns a channel state by channel id.
	GetChannelState(ctx context.Context, in *ChannelStateRequest, opts ...grpc.CallOption) (*ChannelStateReply, error)
}

type paymentChannelStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentChannelStateServiceClient(cc grpc.ClientConnInterface) PaymentChannelStateServiceClient {
	return &paymentChannelStateServiceClient{cc}
}

func (c *paymentChannelStateServiceClient) GetChannelState(ctx context.Context, in *ChannelStateRequest, opts ...grpc.CallOption) (*ChannelStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ChannelStateReply)
	err := c.cc.Invoke(ctx, PaymentChannelStateService_GetChannelState_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentChannelStateServiceServer is the server API for PaymentChannelStateService service.
// All implementations must embed UnimplementedPaymentChannelStateServiceServer
// for forward compatibility.
//
// PaymentChannelStateService contains methods to get the MultiPartyEscrow
// payment channel state.
// channel_id, channel_nonce, value and amount fields below in fact are
// Solidity uint256 values. Which are big-endian integers, see
// https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#formal-specification-of-the-encoding
// These values may be or may be not padded by zeros, service supports both
// options.
type PaymentChannelStateServiceServer interface {
	// GetChannelState method returns a channel state by channel id.
	GetChannelState(context.Context, *ChannelStateRequest) (*ChannelStateReply, error)
	mustEmbedUnimplementedPaymentChannelStateServiceServer()
}

// UnimplementedPaymentChannelStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentChannelStateServiceServer struct{}

func (UnimplementedPaymentChannelStateServiceServer) GetChannelState(context.Context, *ChannelStateRequest) (*ChannelStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChannelState not implemented")
}
func (UnimplementedPaymentChannelStateServiceServer) mustEmbedUnimplementedPaymentChannelStateServiceServer() {
}
func (UnimplementedPaymentChannelStateServiceServer) testEmbeddedByValue() {}

// UnsafePaymentChannelStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentChannelStateServiceServer will
// result in compilation errors.
type UnsafePaymentChannelStateServiceServer interface {
	mustEmbedUnimplementedPaymentChannelStateServiceServer()
}

func RegisterPaymentChannelStateServiceServer(s grpc.ServiceRegistrar, srv PaymentChannelStateServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentChannelStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentChannelStateService_ServiceDesc, srv)
}

func _PaymentChannelStateService_GetChannelState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChannelStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentChannelStateServiceServer).GetChannelState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentChannelStateService_GetChannelState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentChannelStateServiceServer).GetChannelState(ctx, req.(*ChannelStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentChannelStateService_ServiceDesc is the grpc.ServiceDesc for PaymentChannelStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentChannelStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "escrow.PaymentChannelStateService",
	HandlerType: (*PaymentChannelStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannelState",
			Handler:    _PaymentChannelStateService_GetChannelState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/snet/state_service.proto",
}

const (
	FreeCallStateService_GetFreeCallsAvailable_FullMethodName = "/escrow.FreeCallStateService/GetFreeCallsAvailable"
	FreeCallStateService_GetFreeCallToken_FullMethodName      = "/escrow.FreeCallStateService/GetFreeCallToken"
)

// FreeCallStateServiceClient is the client API for FreeCallStateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Used to determine free calls available for a given user.
type FreeCallStateServiceClient interface {
	GetFreeCallsAvailable(ctx context.Context, in *FreeCallStateRequest, opts ...grpc.CallOption) (*FreeCallStateReply, error)
	GetFreeCallToken(ctx context.Context, in *GetFreeCallTokenRequest, opts ...grpc.CallOption) (*FreeCallToken, error)
}

type freeCallStateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFreeCallStateServiceClient(cc grpc.ClientConnInterface) FreeCallStateServiceClient {
	return &freeCallStateServiceClient{cc}
}

func (c *freeCallStateServiceClient) GetFreeCallsAvailable(ctx context.Context, in *FreeCallStateRequest, opts ...grpc.CallOption) (*FreeCallStateReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreeCallStateReply)
	err := c.cc.Invoke(ctx, FreeCallStateService_GetFreeCallsAvailable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeCallStateServiceClient) GetFreeCallToken(ctx context.Context, in *GetFreeCallTokenRequest, opts ...grpc.CallOption) (*FreeCallToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FreeCallToken)
	err := c.cc.Invoke(ctx, FreeCallStateService_GetFreeCallToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreeCallStateServiceServer is the server API for FreeCallStateService service.
// All implementations must embed UnimplementedFreeCallStateServiceServer
// for forward compatibility.
//
// Used to determine free calls available for a given user.
type FreeCallStateServiceServer interface {
	GetFreeCallsAvailable(context.Context, *FreeCallStateRequest) (*FreeCallStateReply, error)
	GetFreeCallToken(context.Context, *GetFreeCallTokenRequest) (*FreeCallToken, error)
	mustEmbedUnimplementedFreeCallStateServiceServer()
}

// UnimplementedFreeCallStateServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedFreeCallStateServiceServer struct{}

func (UnimplementedFreeCallStateServiceServer) GetFreeCallsAvailable(context.Context, *FreeCallStateRequest) (*FreeCallStateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeCallsAvailable not implemented")
}
func (UnimplementedFreeCallStateServiceServer) GetFreeCallToken(context.Context, *GetFreeCallTokenRequest) (*FreeCallToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFreeCallToken not implemented")
}
func (UnimplementedFreeCallStateServiceServer) mustEmbedUnimplementedFreeCallStateServiceServer() {}
func (UnimplementedFreeCallStateServiceServer) testEmbeddedByValue()                              {}

// UnsafeFreeCallStateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreeCallStateServiceServer will
// result in compilation errors.
type UnsafeFreeCallStateServiceServer interface {
	mustEmbedUnimplementedFreeCallStateServiceServer()
}

func RegisterFreeCallStateServiceServer(s grpc.ServiceRegistrar, srv FreeCallStateServiceServer) {
	// If the following call pancis, it indicates UnimplementedFreeCallStateServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&FreeCallStateService_ServiceDesc, srv)
}

func _FreeCallStateService_GetFreeCallsAvailable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeCallStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeCallStateServiceServer).GetFreeCallsAvailable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreeCallStateService_GetFreeCallsAvailable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeCallStateServiceServer).GetFreeCallsAvailable(ctx, req.(*FreeCallStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FreeCallStateService_GetFreeCallToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFreeCallTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeCallStateServiceServer).GetFreeCallToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FreeCallStateService_GetFreeCallToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeCallStateServiceServer).GetFreeCallToken(ctx, req.(*GetFreeCallTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FreeCallStateService_ServiceDesc is the grpc.ServiceDesc for FreeCallStateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FreeCallStateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "escrow.FreeCallStateService",
	HandlerType: (*FreeCallStateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFreeCallsAvailable",
			Handler:    _FreeCallStateService_GetFreeCallsAvailable_Handler,
		},
		{
			MethodName: "GetFreeCallToken",
			Handler:    _FreeCallStateService_GetFreeCallToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/snet/state_service.proto",
}
