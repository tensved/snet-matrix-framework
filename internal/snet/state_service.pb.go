// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: internal/snet/state_service.proto

package snet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ChanelStateRequest is a request for channel state.
type ChannelStateRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// channel_id contains id of the channel which state is requested.
	ChannelId []byte `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// signature is a client signature of the message which contains
	// channel_id. It is used for client authorization.
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	// current block number (signature will be valid only for short time around this block number)
	CurrentBlock  uint64 `protobuf:"varint,3,opt,name=current_block,json=currentBlock,proto3" json:"current_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelStateRequest) Reset() {
	*x = ChannelStateRequest{}
	mi := &file_internal_snet_state_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateRequest) ProtoMessage() {}

func (x *ChannelStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateRequest.ProtoReflect.Descriptor instead.
func (*ChannelStateRequest) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{0}
}

func (x *ChannelStateRequest) GetChannelId() []byte {
	if x != nil {
		return x.ChannelId
	}
	return nil
}

func (x *ChannelStateRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *ChannelStateRequest) GetCurrentBlock() uint64 {
	if x != nil {
		return x.CurrentBlock
	}
	return 0
}

// ChannelStateReply message contains a latest channel state. current_nonce and
// current_value fields can be different from ones stored in the blockchain if
// server started withdrawing funds froms channel but transaction is still not
// finished.
type ChannelStateReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// current_nonce is a latest nonce of the payment channel.
	CurrentNonce []byte `protobuf:"bytes,1,opt,name=current_nonce,json=currentNonce,proto3" json:"current_nonce,omitempty"`
	// current_signed_amount is a last amount which were signed by client with current_nonce
	// it could be absent if none message was signed with current_nonce
	CurrentSignedAmount []byte `protobuf:"bytes,2,opt,name=current_signed_amount,json=currentSignedAmount,proto3" json:"current_signed_amount,omitempty"`
	// current_signature is a last signature sent by client with current_nonce
	// it could be absent if none message was signed with current nonce
	CurrentSignature []byte `protobuf:"bytes,3,opt,name=current_signature,json=currentSignature,proto3" json:"current_signature,omitempty"`
	// last amount which was signed by client with nonce=current_nonce - 1
	OldNonceSignedAmount []byte `protobuf:"bytes,4,opt,name=old_nonce_signed_amount,json=oldNonceSignedAmount,proto3" json:"old_nonce_signed_amount,omitempty"`
	// last signature sent by client with nonce = current_nonce - 1
	OldNonceSignature []byte `protobuf:"bytes,5,opt,name=old_nonce_signature,json=oldNonceSignature,proto3" json:"old_nonce_signature,omitempty"`
	// If the client / user chooses to sign upfront , the planned amount in cogs will be indicative of this.
	// For pay per use, this will be zero
	PlannedAmount uint64 `protobuf:"varint,6,opt,name=planned_amount,json=plannedAmount,proto3" json:"planned_amount,omitempty"`
	// If the client / user chooses to sign upfront , the usage amount in cogs will be indicative of how much of the
	// planned amount has actually been used.
	// For pay per use, this will be zero
	UsedAmount    uint64 `protobuf:"varint,7,opt,name=used_amount,json=usedAmount,proto3" json:"used_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ChannelStateReply) Reset() {
	*x = ChannelStateReply{}
	mi := &file_internal_snet_state_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelStateReply) ProtoMessage() {}

func (x *ChannelStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelStateReply.ProtoReflect.Descriptor instead.
func (*ChannelStateReply) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{1}
}

func (x *ChannelStateReply) GetCurrentNonce() []byte {
	if x != nil {
		return x.CurrentNonce
	}
	return nil
}

func (x *ChannelStateReply) GetCurrentSignedAmount() []byte {
	if x != nil {
		return x.CurrentSignedAmount
	}
	return nil
}

func (x *ChannelStateReply) GetCurrentSignature() []byte {
	if x != nil {
		return x.CurrentSignature
	}
	return nil
}

func (x *ChannelStateReply) GetOldNonceSignedAmount() []byte {
	if x != nil {
		return x.OldNonceSignedAmount
	}
	return nil
}

func (x *ChannelStateReply) GetOldNonceSignature() []byte {
	if x != nil {
		return x.OldNonceSignature
	}
	return nil
}

func (x *ChannelStateReply) GetPlannedAmount() uint64 {
	if x != nil {
		return x.PlannedAmount
	}
	return 0
}

func (x *ChannelStateReply) GetUsedAmount() uint64 {
	if x != nil {
		return x.UsedAmount
	}
	return 0
}

type GetFreeCallTokenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// required for all calls
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// ("__prefix_free_trial", address, user_id, organization_id, service_id, group_id, current_block)
	Signature    []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
	CurrentBlock uint64 `protobuf:"varint,3,opt,name=current_block,json=currentBlock,proto3" json:"current_block,omitempty"`
	// only for calls for trusted signers
	UserId *string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Duration of the token's validity, measured in blocks.
	// For example, if the average block time is ~12 seconds, then 100 blocks â‰ˆ 20 minutes.
	// Max value: 172800
	TokenLifetimeInBlocks *uint64 `protobuf:"varint,5,opt,name=token_lifetime_in_blocks,json=tokenLifetimeInBlocks,proto3,oneof" json:"token_lifetime_in_blocks,omitempty"`
	unknownFields         protoimpl.UnknownFields
	sizeCache             protoimpl.SizeCache
}

func (x *GetFreeCallTokenRequest) Reset() {
	*x = GetFreeCallTokenRequest{}
	mi := &file_internal_snet_state_service_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetFreeCallTokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetFreeCallTokenRequest) ProtoMessage() {}

func (x *GetFreeCallTokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetFreeCallTokenRequest.ProtoReflect.Descriptor instead.
func (*GetFreeCallTokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetFreeCallTokenRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetFreeCallTokenRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *GetFreeCallTokenRequest) GetCurrentBlock() uint64 {
	if x != nil {
		return x.CurrentBlock
	}
	return 0
}

func (x *GetFreeCallTokenRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *GetFreeCallTokenRequest) GetTokenLifetimeInBlocks() uint64 {
	if x != nil && x.TokenLifetimeInBlocks != nil {
		return *x.TokenLifetimeInBlocks
	}
	return 0
}

type FreeCallToken struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Token with expiration block encoded in the format: <signature>_<blockNumber>
	// Example: [binary signature][0x5f][ascii decimal block number]
	Token []byte `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	// Hex-encoded representation of the `token` field
	TokenHex string `protobuf:"bytes,2,opt,name=token_hex,json=tokenHex,proto3" json:"token_hex,omitempty"`
	// token_expiration_block = currentBlock + token_lifetime_in_blocks (deadline block)
	TokenExpirationBlock uint64 `protobuf:"varint,3,opt,name=token_expiration_block,json=tokenExpirationBlock,proto3" json:"token_expiration_block,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *FreeCallToken) Reset() {
	*x = FreeCallToken{}
	mi := &file_internal_snet_state_service_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeCallToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeCallToken) ProtoMessage() {}

func (x *FreeCallToken) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeCallToken.ProtoReflect.Descriptor instead.
func (*FreeCallToken) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{3}
}

func (x *FreeCallToken) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *FreeCallToken) GetTokenHex() string {
	if x != nil {
		return x.TokenHex
	}
	return ""
}

func (x *FreeCallToken) GetTokenExpirationBlock() uint64 {
	if x != nil {
		return x.TokenExpirationBlock
	}
	return 0
}

type FreeCallStateRequest struct {
	state   protoimpl.MessageState `protogen:"open.v1"`
	Address string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	// optional, specify if you trusted signer
	UserId *string `protobuf:"bytes,2,opt,name=user_id,json=userId,proto3,oneof" json:"user_id,omitempty"`
	// Previously issued token from GetFreeCallToken
	FreeCallToken []byte `protobuf:"bytes,3,opt,name=free_call_token,json=freeCallToken,proto3" json:"free_call_token,omitempty"`
	// Signature is made up of the below, user signs with the private key corresponding with the public key used to generate the authorized token
	// ("__prefix_free_trial", address, user_id, organization_id, service_id, group_id, current_block, token)
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// current block number (signature will be valid only for short time around this block number)
	CurrentBlock  uint64 `protobuf:"varint,5,opt,name=current_block,json=currentBlock,proto3" json:"current_block,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FreeCallStateRequest) Reset() {
	*x = FreeCallStateRequest{}
	mi := &file_internal_snet_state_service_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeCallStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeCallStateRequest) ProtoMessage() {}

func (x *FreeCallStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeCallStateRequest.ProtoReflect.Descriptor instead.
func (*FreeCallStateRequest) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{4}
}

func (x *FreeCallStateRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FreeCallStateRequest) GetUserId() string {
	if x != nil && x.UserId != nil {
		return *x.UserId
	}
	return ""
}

func (x *FreeCallStateRequest) GetFreeCallToken() []byte {
	if x != nil {
		return x.FreeCallToken
	}
	return nil
}

func (x *FreeCallStateRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *FreeCallStateRequest) GetCurrentBlock() uint64 {
	if x != nil {
		return x.CurrentBlock
	}
	return 0
}

type FreeCallStateReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// number of free calls available
	FreeCallsAvailable uint64 `protobuf:"varint,1,opt,name=free_calls_available,json=freeCallsAvailable,proto3" json:"free_calls_available,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *FreeCallStateReply) Reset() {
	*x = FreeCallStateReply{}
	mi := &file_internal_snet_state_service_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FreeCallStateReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FreeCallStateReply) ProtoMessage() {}

func (x *FreeCallStateReply) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_state_service_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FreeCallStateReply.ProtoReflect.Descriptor instead.
func (*FreeCallStateReply) Descriptor() ([]byte, []int) {
	return file_internal_snet_state_service_proto_rawDescGZIP(), []int{5}
}

func (x *FreeCallStateReply) GetFreeCallsAvailable() uint64 {
	if x != nil {
		return x.FreeCallsAvailable
	}
	return 0
}

var File_internal_snet_state_service_proto protoreflect.FileDescriptor

const file_internal_snet_state_service_proto_rawDesc = "" +
	"\n" +
	"!internal/snet/state_service.proto\x12\x06escrow\"w\n" +
	"\x13ChannelStateRequest\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\fR\tchannelId\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12#\n" +
	"\rcurrent_block\x18\x03 \x01(\x04R\fcurrentBlock\"\xc8\x02\n" +
	"\x11ChannelStateReply\x12#\n" +
	"\rcurrent_nonce\x18\x01 \x01(\fR\fcurrentNonce\x122\n" +
	"\x15current_signed_amount\x18\x02 \x01(\fR\x13currentSignedAmount\x12+\n" +
	"\x11current_signature\x18\x03 \x01(\fR\x10currentSignature\x125\n" +
	"\x17old_nonce_signed_amount\x18\x04 \x01(\fR\x14oldNonceSignedAmount\x12.\n" +
	"\x13old_nonce_signature\x18\x05 \x01(\fR\x11oldNonceSignature\x12%\n" +
	"\x0eplanned_amount\x18\x06 \x01(\x04R\rplannedAmount\x12\x1f\n" +
	"\vused_amount\x18\a \x01(\x04R\n" +
	"usedAmount\"\xfb\x01\n" +
	"\x17GetFreeCallTokenRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x1c\n" +
	"\tsignature\x18\x02 \x01(\fR\tsignature\x12#\n" +
	"\rcurrent_block\x18\x03 \x01(\x04R\fcurrentBlock\x12\x1c\n" +
	"\auser_id\x18\x04 \x01(\tH\x00R\x06userId\x88\x01\x01\x12<\n" +
	"\x18token_lifetime_in_blocks\x18\x05 \x01(\x04H\x01R\x15tokenLifetimeInBlocks\x88\x01\x01B\n" +
	"\n" +
	"\b_user_idB\x1b\n" +
	"\x19_token_lifetime_in_blocks\"x\n" +
	"\rFreeCallToken\x12\x14\n" +
	"\x05token\x18\x01 \x01(\fR\x05token\x12\x1b\n" +
	"\ttoken_hex\x18\x02 \x01(\tR\btokenHex\x124\n" +
	"\x16token_expiration_block\x18\x03 \x01(\x04R\x14tokenExpirationBlock\"\xc5\x01\n" +
	"\x14FreeCallStateRequest\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\tR\aaddress\x12\x1c\n" +
	"\auser_id\x18\x02 \x01(\tH\x00R\x06userId\x88\x01\x01\x12&\n" +
	"\x0ffree_call_token\x18\x03 \x01(\fR\rfreeCallToken\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\x12#\n" +
	"\rcurrent_block\x18\x05 \x01(\x04R\fcurrentBlockB\n" +
	"\n" +
	"\b_user_id\"F\n" +
	"\x12FreeCallStateReply\x120\n" +
	"\x14free_calls_available\x18\x01 \x01(\x04R\x12freeCallsAvailable2i\n" +
	"\x1aPaymentChannelStateService\x12K\n" +
	"\x0fGetChannelState\x12\x1b.escrow.ChannelStateRequest\x1a\x19.escrow.ChannelStateReply\"\x002\xb9\x01\n" +
	"\x14FreeCallStateService\x12S\n" +
	"\x15GetFreeCallsAvailable\x12\x1c.escrow.FreeCallStateRequest\x1a\x1a.escrow.FreeCallStateReply\"\x00\x12L\n" +
	"\x10GetFreeCallToken\x12\x1f.escrow.GetFreeCallTokenRequest\x1a\x15.escrow.FreeCallToken\"\x00B=Z;github.com/tensved/snet-matrix-framework/internal/snet;snetb\x06proto3"

var (
	file_internal_snet_state_service_proto_rawDescOnce sync.Once
	file_internal_snet_state_service_proto_rawDescData []byte
)

func file_internal_snet_state_service_proto_rawDescGZIP() []byte {
	file_internal_snet_state_service_proto_rawDescOnce.Do(func() {
		file_internal_snet_state_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_snet_state_service_proto_rawDesc), len(file_internal_snet_state_service_proto_rawDesc)))
	})
	return file_internal_snet_state_service_proto_rawDescData
}

var file_internal_snet_state_service_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_internal_snet_state_service_proto_goTypes = []any{
	(*ChannelStateRequest)(nil),     // 0: escrow.ChannelStateRequest
	(*ChannelStateReply)(nil),       // 1: escrow.ChannelStateReply
	(*GetFreeCallTokenRequest)(nil), // 2: escrow.GetFreeCallTokenRequest
	(*FreeCallToken)(nil),           // 3: escrow.FreeCallToken
	(*FreeCallStateRequest)(nil),    // 4: escrow.FreeCallStateRequest
	(*FreeCallStateReply)(nil),      // 5: escrow.FreeCallStateReply
}
var file_internal_snet_state_service_proto_depIdxs = []int32{
	0, // 0: escrow.PaymentChannelStateService.GetChannelState:input_type -> escrow.ChannelStateRequest
	4, // 1: escrow.FreeCallStateService.GetFreeCallsAvailable:input_type -> escrow.FreeCallStateRequest
	2, // 2: escrow.FreeCallStateService.GetFreeCallToken:input_type -> escrow.GetFreeCallTokenRequest
	1, // 3: escrow.PaymentChannelStateService.GetChannelState:output_type -> escrow.ChannelStateReply
	5, // 4: escrow.FreeCallStateService.GetFreeCallsAvailable:output_type -> escrow.FreeCallStateReply
	3, // 5: escrow.FreeCallStateService.GetFreeCallToken:output_type -> escrow.FreeCallToken
	3, // [3:6] is the sub-list for method output_type
	0, // [0:3] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_snet_state_service_proto_init() }
func file_internal_snet_state_service_proto_init() {
	if File_internal_snet_state_service_proto != nil {
		return
	}
	file_internal_snet_state_service_proto_msgTypes[2].OneofWrappers = []any{}
	file_internal_snet_state_service_proto_msgTypes[4].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_snet_state_service_proto_rawDesc), len(file_internal_snet_state_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_internal_snet_state_service_proto_goTypes,
		DependencyIndexes: file_internal_snet_state_service_proto_depIdxs,
		MessageInfos:      file_internal_snet_state_service_proto_msgTypes,
	}.Build()
	File_internal_snet_state_service_proto = out.File
	file_internal_snet_state_service_proto_goTypes = nil
	file_internal_snet_state_service_proto_depIdxs = nil
}
