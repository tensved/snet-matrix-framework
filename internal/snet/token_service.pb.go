// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        v5.29.3
// source: internal/snet/token_service.proto

package snet

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// TokenRequest is a request for getting a valid token.
type TokenRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// channel_id contains id of the channel which state is requested.
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// current_nonce is a latest nonce of the payment channel.
	CurrentNonce uint64 `protobuf:"varint,2,opt,name=current_nonce,json=currentNonce,proto3" json:"current_nonce,omitempty"`
	// signed_amount is the amount signed by client with current_nonce
	SignedAmount uint64 `protobuf:"varint,3,opt,name=signed_amount,json=signedAmount,proto3" json:"signed_amount,omitempty"`
	// Signature is a client signature of the message which contains 2 parts
	// Part 1 : MPE Signature "__MPE_claim_message"+MpeContractAddress+ChannelID+ChannelNonce+SignedAmount
	// Part 2 : Current Block Number
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// current block number (signature will be valid only for short time around this block number)
	CurrentBlock   uint64 `protobuf:"varint,5,opt,name=current_block,json=currentBlock,proto3" json:"current_block,omitempty"`
	ClaimSignature []byte `protobuf:"bytes,6,opt,name=claim_signature,json=claimSignature,proto3" json:"claim_signature,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *TokenRequest) Reset() {
	*x = TokenRequest{}
	mi := &file_internal_snet_token_service_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenRequest) ProtoMessage() {}

func (x *TokenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_token_service_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenRequest.ProtoReflect.Descriptor instead.
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return file_internal_snet_token_service_proto_rawDescGZIP(), []int{0}
}

func (x *TokenRequest) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TokenRequest) GetCurrentNonce() uint64 {
	if x != nil {
		return x.CurrentNonce
	}
	return 0
}

func (x *TokenRequest) GetSignedAmount() uint64 {
	if x != nil {
		return x.SignedAmount
	}
	return 0
}

func (x *TokenRequest) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *TokenRequest) GetCurrentBlock() uint64 {
	if x != nil {
		return x.CurrentBlock
	}
	return 0
}

func (x *TokenRequest) GetClaimSignature() []byte {
	if x != nil {
		return x.ClaimSignature
	}
	return nil
}

// TokenReply message contains a latest channel state. current_nonce and
type TokenReply struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// current_nonce is a latest nonce of the payment channel.
	ChannelId uint64 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// it could be absent if none message was signed with current_nonce
	Token string `protobuf:"bytes,2,opt,name=token,proto3" json:"token,omitempty"`
	// If the client / user chooses to sign upfront, the planned amount in cogs will be indicative of this.
	PlannedAmount uint64 `protobuf:"varint,3,opt,name=planned_amount,json=plannedAmount,proto3" json:"planned_amount,omitempty"`
	// If the client / user chooses to sign upfront, the used amount in cogs will be indicative of how much of the
	// planned amount has actually been used.
	UsedAmount    uint64 `protobuf:"varint,4,opt,name=used_amount,json=usedAmount,proto3" json:"used_amount,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenReply) Reset() {
	*x = TokenReply{}
	mi := &file_internal_snet_token_service_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenReply) ProtoMessage() {}

func (x *TokenReply) ProtoReflect() protoreflect.Message {
	mi := &file_internal_snet_token_service_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenReply.ProtoReflect.Descriptor instead.
func (*TokenReply) Descriptor() ([]byte, []int) {
	return file_internal_snet_token_service_proto_rawDescGZIP(), []int{1}
}

func (x *TokenReply) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *TokenReply) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TokenReply) GetPlannedAmount() uint64 {
	if x != nil {
		return x.PlannedAmount
	}
	return 0
}

func (x *TokenReply) GetUsedAmount() uint64 {
	if x != nil {
		return x.UsedAmount
	}
	return 0
}

var File_internal_snet_token_service_proto protoreflect.FileDescriptor

const file_internal_snet_token_service_proto_rawDesc = "" +
	"\n" +
	"!internal/snet/token_service.proto\x12\x06escrow\"\xe3\x01\n" +
	"\fTokenRequest\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\x04R\tchannelId\x12#\n" +
	"\rcurrent_nonce\x18\x02 \x01(\x04R\fcurrentNonce\x12#\n" +
	"\rsigned_amount\x18\x03 \x01(\x04R\fsignedAmount\x12\x1c\n" +
	"\tsignature\x18\x04 \x01(\fR\tsignature\x12#\n" +
	"\rcurrent_block\x18\x05 \x01(\x04R\fcurrentBlock\x12'\n" +
	"\x0fclaim_signature\x18\x06 \x01(\fR\x0eclaimSignature\"\x89\x01\n" +
	"\n" +
	"TokenReply\x12\x1d\n" +
	"\n" +
	"channel_id\x18\x01 \x01(\x04R\tchannelId\x12\x14\n" +
	"\x05token\x18\x02 \x01(\tR\x05token\x12%\n" +
	"\x0eplanned_amount\x18\x03 \x01(\x04R\rplannedAmount\x12\x1f\n" +
	"\vused_amount\x18\x04 \x01(\x04R\n" +
	"usedAmount2F\n" +
	"\fTokenService\x126\n" +
	"\bGetToken\x12\x14.escrow.TokenRequest\x1a\x12.escrow.TokenReply\"\x00B^\n" +
	"\x1fio.singularitynet.daemon.escrowZ;github.com/tensved/snet-matrix-framework/internal/snet;snetb\x06proto3"

var (
	file_internal_snet_token_service_proto_rawDescOnce sync.Once
	file_internal_snet_token_service_proto_rawDescData []byte
)

func file_internal_snet_token_service_proto_rawDescGZIP() []byte {
	file_internal_snet_token_service_proto_rawDescOnce.Do(func() {
		file_internal_snet_token_service_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_internal_snet_token_service_proto_rawDesc), len(file_internal_snet_token_service_proto_rawDesc)))
	})
	return file_internal_snet_token_service_proto_rawDescData
}

var file_internal_snet_token_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_internal_snet_token_service_proto_goTypes = []any{
	(*TokenRequest)(nil), // 0: escrow.TokenRequest
	(*TokenReply)(nil),   // 1: escrow.TokenReply
}
var file_internal_snet_token_service_proto_depIdxs = []int32{
	0, // 0: escrow.TokenService.GetToken:input_type -> escrow.TokenRequest
	1, // 1: escrow.TokenService.GetToken:output_type -> escrow.TokenReply
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_internal_snet_token_service_proto_init() }
func file_internal_snet_token_service_proto_init() {
	if File_internal_snet_token_service_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_internal_snet_token_service_proto_rawDesc), len(file_internal_snet_token_service_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_internal_snet_token_service_proto_goTypes,
		DependencyIndexes: file_internal_snet_token_service_proto_depIdxs,
		MessageInfos:      file_internal_snet_token_service_proto_msgTypes,
	}.Build()
	File_internal_snet_token_service_proto = out.File
	file_internal_snet_token_service_proto_goTypes = nil
	file_internal_snet_token_service_proto_depIdxs = nil
}
