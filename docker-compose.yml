services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3000:80"
    env_file:
      - ./frontend/.env.local
    networks:
      - webnet
    restart: always

  backend:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: backend
    ports:
      - "${APP_PORT}:${APP_PORT}"
    env_file:
      - ./.env
    networks:
      - webnet
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://127.0.0.1:${APP_PORT}/api/health || exit 1" ]
      interval: 5s
      timeout: 5s
      start_period: 120s
      retries: 5
    restart: always

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/templates:/etc/nginx/templates
      - ./nginx/entrypoint.sh:/entrypoint.sh
      - ./certbot/www:/var/www/certbot/:ro
      - ./certbot/conf/:/etc/nginx/ssl/:rw
    restart: always
    depends_on:
      backend:
        condition: service_healthy
      frontend:
        condition: service_started
    entrypoint: ["/bin/sh", "-c", "chmod +x /entrypoint.sh && /entrypoint.sh"]
    environment:
      DOMAIN: ${DOMAIN}
      BACKEND_PORT: ${APP_PORT}
    networks:
      - webnet

  certbot:
    image: certbot/certbot:latest
    container_name: certbot
    volumes:
      - ./certbot/www/:/var/www/certbot/:rw
      - ./certbot/conf/:/etc/letsencrypt/:rw
    networks:
      - webnet

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - psql_volume:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - webnet
    restart: always

volumes:
  psql_volume:

networks:
  webnet:
    driver: bridge